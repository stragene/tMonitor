ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"system_stm32f0xx.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SystemInit,"ax",%progbits
  20              		.align	2
  21              		.global	SystemInit
  22              		.code	16
  23              		.thumb_func
  25              	SystemInit:
  26              	.LFB34:
  27              		.file 1 "Src/system_stm32f0xx.c"
   1:Src/system_stm32f0xx.c **** /**
   2:Src/system_stm32f0xx.c ****   ******************************************************************************
   3:Src/system_stm32f0xx.c ****   * @file    system_stm32f0xx.c
   4:Src/system_stm32f0xx.c ****   * @author  MCD Application Team
   5:Src/system_stm32f0xx.c ****   * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
   6:Src/system_stm32f0xx.c ****   *
   7:Src/system_stm32f0xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:Src/system_stm32f0xx.c ****   *    user application:
   9:Src/system_stm32f0xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Src/system_stm32f0xx.c ****   *                      before branch to main program. This call is made inside
  11:Src/system_stm32f0xx.c ****   *                      the "startup_stm32f0xx.s" file.
  12:Src/system_stm32f0xx.c ****   *
  13:Src/system_stm32f0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Src/system_stm32f0xx.c ****   *                                  by the user application to setup the SysTick
  15:Src/system_stm32f0xx.c ****   *                                  timer or configure other parameters.
  16:Src/system_stm32f0xx.c ****   *
  17:Src/system_stm32f0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Src/system_stm32f0xx.c ****   *                                 be called whenever the core clock is changed
  19:Src/system_stm32f0xx.c ****   *                                 during program execution.
  20:Src/system_stm32f0xx.c ****   *
  21:Src/system_stm32f0xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:Src/system_stm32f0xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
  23:Src/system_stm32f0xx.c ****   *    configure the system clock before to branch to main program.
  24:Src/system_stm32f0xx.c ****   *
  25:Src/system_stm32f0xx.c ****   * 3. This file configures the system clock as follows:
  26:Src/system_stm32f0xx.c ****   *=============================================================================
  27:Src/system_stm32f0xx.c ****   *                         Supported STM32F0xx device
  28:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  29:Src/system_stm32f0xx.c ****   *        System Clock source                    | HSI
  30:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  31:Src/system_stm32f0xx.c ****   *        SYSCLK(Hz)                             | 8000000
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 2


  32:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  33:Src/system_stm32f0xx.c ****   *        HCLK(Hz)                               | 8000000
  34:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  35:Src/system_stm32f0xx.c ****   *        AHB Prescaler                          | 1
  36:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  37:Src/system_stm32f0xx.c ****   *        APB1 Prescaler                         | 1
  38:Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  39:Src/system_stm32f0xx.c ****   *=============================================================================
  40:Src/system_stm32f0xx.c ****   ******************************************************************************
  41:Src/system_stm32f0xx.c ****   * @attention
  42:Src/system_stm32f0xx.c ****   *
  43:Src/system_stm32f0xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  44:Src/system_stm32f0xx.c ****   *
  45:Src/system_stm32f0xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  46:Src/system_stm32f0xx.c ****   * are permitted provided that the following conditions are met:
  47:Src/system_stm32f0xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  48:Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer.
  49:Src/system_stm32f0xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  50:Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  51:Src/system_stm32f0xx.c ****   *      and/or other materials provided with the distribution.
  52:Src/system_stm32f0xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  53:Src/system_stm32f0xx.c ****   *      may be used to endorse or promote products derived from this software
  54:Src/system_stm32f0xx.c ****   *      without specific prior written permission.
  55:Src/system_stm32f0xx.c ****   *
  56:Src/system_stm32f0xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  57:Src/system_stm32f0xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  58:Src/system_stm32f0xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  59:Src/system_stm32f0xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  60:Src/system_stm32f0xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  61:Src/system_stm32f0xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  62:Src/system_stm32f0xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  63:Src/system_stm32f0xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  64:Src/system_stm32f0xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  65:Src/system_stm32f0xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  66:Src/system_stm32f0xx.c ****   *
  67:Src/system_stm32f0xx.c ****   ******************************************************************************
  68:Src/system_stm32f0xx.c ****   */
  69:Src/system_stm32f0xx.c **** 
  70:Src/system_stm32f0xx.c **** /** @addtogroup CMSIS
  71:Src/system_stm32f0xx.c ****   * @{
  72:Src/system_stm32f0xx.c ****   */
  73:Src/system_stm32f0xx.c **** 
  74:Src/system_stm32f0xx.c **** /** @addtogroup stm32f0xx_system
  75:Src/system_stm32f0xx.c ****   * @{
  76:Src/system_stm32f0xx.c ****   */
  77:Src/system_stm32f0xx.c **** 
  78:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Includes
  79:Src/system_stm32f0xx.c ****   * @{
  80:Src/system_stm32f0xx.c ****   */
  81:Src/system_stm32f0xx.c **** 
  82:Src/system_stm32f0xx.c **** #include "stm32f0xx.h"
  83:Src/system_stm32f0xx.c **** 
  84:Src/system_stm32f0xx.c **** /**
  85:Src/system_stm32f0xx.c ****   * @}
  86:Src/system_stm32f0xx.c ****   */
  87:Src/system_stm32f0xx.c **** 
  88:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 3


  89:Src/system_stm32f0xx.c ****   * @{
  90:Src/system_stm32f0xx.c ****   */
  91:Src/system_stm32f0xx.c **** 
  92:Src/system_stm32f0xx.c **** /**
  93:Src/system_stm32f0xx.c ****   * @}
  94:Src/system_stm32f0xx.c ****   */
  95:Src/system_stm32f0xx.c **** 
  96:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Defines
  97:Src/system_stm32f0xx.c ****   * @{
  98:Src/system_stm32f0xx.c ****   */
  99:Src/system_stm32f0xx.c **** #if !defined  (HSE_VALUE) 
 100:Src/system_stm32f0xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
 101:Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 102:Src/system_stm32f0xx.c **** #endif /* HSE_VALUE */
 103:Src/system_stm32f0xx.c **** 
 104:Src/system_stm32f0xx.c **** #if !defined  (HSI_VALUE)
 105:Src/system_stm32f0xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
 106:Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 107:Src/system_stm32f0xx.c **** #endif /* HSI_VALUE */
 108:Src/system_stm32f0xx.c **** 
 109:Src/system_stm32f0xx.c **** #if !defined (HSI48_VALUE)
 110:Src/system_stm32f0xx.c **** #define HSI48_VALUE    ((uint32_t)48000000) /*!< Default value of the HSI48 Internal oscillator in 
 111:Src/system_stm32f0xx.c ****                                                  This value can be provided and adapted by the user
 112:Src/system_stm32f0xx.c **** #endif /* HSI48_VALUE */
 113:Src/system_stm32f0xx.c **** /**
 114:Src/system_stm32f0xx.c ****   * @}
 115:Src/system_stm32f0xx.c ****   */
 116:Src/system_stm32f0xx.c **** 
 117:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Macros
 118:Src/system_stm32f0xx.c ****   * @{
 119:Src/system_stm32f0xx.c ****   */
 120:Src/system_stm32f0xx.c **** 
 121:Src/system_stm32f0xx.c **** /**
 122:Src/system_stm32f0xx.c ****   * @}
 123:Src/system_stm32f0xx.c ****   */
 124:Src/system_stm32f0xx.c **** 
 125:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Variables
 126:Src/system_stm32f0xx.c ****   * @{
 127:Src/system_stm32f0xx.c ****   */
 128:Src/system_stm32f0xx.c ****   /* This variable is updated in three ways:
 129:Src/system_stm32f0xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 130:Src/system_stm32f0xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 131:Src/system_stm32f0xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 132:Src/system_stm32f0xx.c ****          Note: If you use this function to configure the system clock there is no need to
 133:Src/system_stm32f0xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is 
 134:Src/system_stm32f0xx.c ****                updated automatically.
 135:Src/system_stm32f0xx.c ****   */
 136:Src/system_stm32f0xx.c **** uint32_t SystemCoreClock = 8000000;
 137:Src/system_stm32f0xx.c **** 
 138:Src/system_stm32f0xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 139:Src/system_stm32f0xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
 140:Src/system_stm32f0xx.c **** 
 141:Src/system_stm32f0xx.c **** /**
 142:Src/system_stm32f0xx.c ****   * @}
 143:Src/system_stm32f0xx.c ****   */
 144:Src/system_stm32f0xx.c **** 
 145:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 4


 146:Src/system_stm32f0xx.c ****   * @{
 147:Src/system_stm32f0xx.c ****   */
 148:Src/system_stm32f0xx.c **** 
 149:Src/system_stm32f0xx.c **** /**
 150:Src/system_stm32f0xx.c ****   * @}
 151:Src/system_stm32f0xx.c ****   */
 152:Src/system_stm32f0xx.c **** 
 153:Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Functions
 154:Src/system_stm32f0xx.c ****   * @{
 155:Src/system_stm32f0xx.c ****   */
 156:Src/system_stm32f0xx.c **** 
 157:Src/system_stm32f0xx.c **** /**
 158:Src/system_stm32f0xx.c ****   * @brief  Setup the microcontroller system.
 159:Src/system_stm32f0xx.c ****   *         Initialize the default HSI clock source, vector table location and the PLL configuratio
 160:Src/system_stm32f0xx.c ****   * @param  None
 161:Src/system_stm32f0xx.c ****   * @retval None
 162:Src/system_stm32f0xx.c ****   */
 163:Src/system_stm32f0xx.c **** void SystemInit(void)
 164:Src/system_stm32f0xx.c **** {
  28              		.loc 1 164 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 165:Src/system_stm32f0xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 166:Src/system_stm32f0xx.c ****   /* Set HSION bit */
 167:Src/system_stm32f0xx.c ****   RCC->CR |= (uint32_t)0x00000001U;
  33              		.loc 1 167 0
  34 0000 134B     		ldr	r3, .L2
  35 0002 1A68     		ldr	r2, [r3]
  36 0004 0121     		movs	r1, #1
  37 0006 0A43     		orrs	r2, r1
  38 0008 1A60     		str	r2, [r3]
 168:Src/system_stm32f0xx.c **** 
 169:Src/system_stm32f0xx.c **** #if defined (STM32F051x8) || defined (STM32F058x8)
 170:Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
 171:Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 172:Src/system_stm32f0xx.c **** #else
 173:Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 174:Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0x08FFB80CU;
  39              		.loc 1 174 0
  40 000a 5868     		ldr	r0, [r3, #4]
  41 000c 114A     		ldr	r2, .L2+4
  42 000e 0240     		ands	r2, r0
  43 0010 5A60     		str	r2, [r3, #4]
 175:Src/system_stm32f0xx.c **** #endif /* STM32F051x8 or STM32F058x8 */
 176:Src/system_stm32f0xx.c ****   
 177:Src/system_stm32f0xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 178:Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFFU;
  44              		.loc 1 178 0
  45 0012 1868     		ldr	r0, [r3]
  46 0014 104A     		ldr	r2, .L2+8
  47 0016 0240     		ands	r2, r0
  48 0018 1A60     		str	r2, [r3]
 179:Src/system_stm32f0xx.c **** 
 180:Src/system_stm32f0xx.c ****   /* Reset HSEBYP bit */
 181:Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFFU;
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 5


  49              		.loc 1 181 0
  50 001a 1868     		ldr	r0, [r3]
  51 001c 0F4A     		ldr	r2, .L2+12
  52 001e 0240     		ands	r2, r0
  53 0020 1A60     		str	r2, [r3]
 182:Src/system_stm32f0xx.c **** 
 183:Src/system_stm32f0xx.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 184:Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
  54              		.loc 1 184 0
  55 0022 5868     		ldr	r0, [r3, #4]
  56 0024 0E4A     		ldr	r2, .L2+16
  57 0026 0240     		ands	r2, r0
  58 0028 5A60     		str	r2, [r3, #4]
 185:Src/system_stm32f0xx.c **** 
 186:Src/system_stm32f0xx.c ****   /* Reset PREDIV[3:0] bits */
 187:Src/system_stm32f0xx.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
  59              		.loc 1 187 0
  60 002a DA6A     		ldr	r2, [r3, #44]
  61 002c 0F20     		movs	r0, #15
  62 002e 8243     		bics	r2, r0
  63 0030 DA62     		str	r2, [r3, #44]
 188:Src/system_stm32f0xx.c **** 
 189:Src/system_stm32f0xx.c **** #if defined (STM32F072xB) || defined (STM32F078xx)
 190:Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 191:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 192:Src/system_stm32f0xx.c **** #elif defined (STM32F071xB)
 193:Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 194:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
 195:Src/system_stm32f0xx.c **** #elif defined (STM32F091xC) || defined (STM32F098xx)
 196:Src/system_stm32f0xx.c ****   /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 197:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 198:Src/system_stm32f0xx.c **** #elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038
 199:Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
 200:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 201:Src/system_stm32f0xx.c **** #elif defined (STM32F051x8) || defined (STM32F058xx)
 202:Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 203:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 204:Src/system_stm32f0xx.c **** #elif defined (STM32F042x6) || defined (STM32F048xx)
 205:Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 206:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 207:Src/system_stm32f0xx.c **** #elif defined (STM32F070x6) || defined (STM32F070xB)
 208:Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
 209:Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
  64              		.loc 1 209 0
  65 0032 186B     		ldr	r0, [r3, #48]
  66 0034 0B4A     		ldr	r2, .L2+20
  67 0036 0240     		ands	r2, r0
  68 0038 1A63     		str	r2, [r3, #48]
 210:Src/system_stm32f0xx.c ****   /* Set default USB clock to PLLCLK, since there is no HSI48 */
 211:Src/system_stm32f0xx.c ****   RCC->CFGR3 |= (uint32_t)0x00000080U;  
  69              		.loc 1 211 0
  70 003a 186B     		ldr	r0, [r3, #48]
  71 003c 8022     		movs	r2, #128
  72 003e 0243     		orrs	r2, r0
  73 0040 1A63     		str	r2, [r3, #48]
 212:Src/system_stm32f0xx.c **** #else
 213:Src/system_stm32f0xx.c ****  #warning "No target selected"
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 6


 214:Src/system_stm32f0xx.c **** #endif
 215:Src/system_stm32f0xx.c **** 
 216:Src/system_stm32f0xx.c ****   /* Reset HSI14 bit */
 217:Src/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
  74              		.loc 1 217 0
  75 0042 5A6B     		ldr	r2, [r3, #52]
  76 0044 8A43     		bics	r2, r1
  77 0046 5A63     		str	r2, [r3, #52]
 218:Src/system_stm32f0xx.c **** 
 219:Src/system_stm32f0xx.c ****   /* Disable all interrupts */
 220:Src/system_stm32f0xx.c ****   RCC->CIR = 0x00000000U;
  78              		.loc 1 220 0
  79 0048 0022     		movs	r2, #0
  80 004a 9A60     		str	r2, [r3, #8]
 221:Src/system_stm32f0xx.c **** 
 222:Src/system_stm32f0xx.c **** }
  81              		.loc 1 222 0
  82              		@ sp needed
  83 004c 7047     		bx	lr
  84              	.L3:
  85 004e C046     		.align	2
  86              	.L2:
  87 0050 00100240 		.word	1073876992
  88 0054 0CB8FF08 		.word	150976524
  89 0058 FFFFF6FE 		.word	-17367041
  90 005c FFFFFBFF 		.word	-262145
  91 0060 FFFFC0FF 		.word	-4128769
  92 0064 6CFEFFFF 		.word	-404
  93              		.cfi_endproc
  94              	.LFE34:
  96              		.global	__aeabi_uidiv
  97              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  98              		.align	2
  99              		.global	SystemCoreClockUpdate
 100              		.code	16
 101              		.thumb_func
 103              	SystemCoreClockUpdate:
 104              	.LFB35:
 223:Src/system_stm32f0xx.c **** 
 224:Src/system_stm32f0xx.c **** /**
 225:Src/system_stm32f0xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 226:Src/system_stm32f0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 227:Src/system_stm32f0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 228:Src/system_stm32f0xx.c ****   *         other parameters.
 229:Src/system_stm32f0xx.c ****   *
 230:Src/system_stm32f0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 231:Src/system_stm32f0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 232:Src/system_stm32f0xx.c ****   *         based on this variable will be incorrect.
 233:Src/system_stm32f0xx.c ****   *
 234:Src/system_stm32f0xx.c ****   * @note   - The system frequency computed by this function is not the real
 235:Src/system_stm32f0xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 236:Src/system_stm32f0xx.c ****   *           constant and the selected clock source:
 237:Src/system_stm32f0xx.c ****   *
 238:Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 239:Src/system_stm32f0xx.c ****   *
 240:Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 241:Src/system_stm32f0xx.c ****   *
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 7


 242:Src/system_stm32f0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 243:Src/system_stm32f0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 244:Src/system_stm32f0xx.c ****   *
 245:Src/system_stm32f0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 246:Src/system_stm32f0xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 247:Src/system_stm32f0xx.c ****   *             in voltage and temperature.
 248:Src/system_stm32f0xx.c ****   *
 249:Src/system_stm32f0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 250:Src/system_stm32f0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 251:Src/system_stm32f0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 252:Src/system_stm32f0xx.c ****   *              have wrong result.
 253:Src/system_stm32f0xx.c ****   *
 254:Src/system_stm32f0xx.c ****   *         - The result of this function could be not correct when using fractional
 255:Src/system_stm32f0xx.c ****   *           value for HSE crystal.
 256:Src/system_stm32f0xx.c ****   *
 257:Src/system_stm32f0xx.c ****   * @param  None
 258:Src/system_stm32f0xx.c ****   * @retval None
 259:Src/system_stm32f0xx.c ****   */
 260:Src/system_stm32f0xx.c **** void SystemCoreClockUpdate (void)
 261:Src/system_stm32f0xx.c **** {
 105              		.loc 1 261 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109 0000 10B5     		push	{r4, lr}
 110              	.LCFI0:
 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 4, -8
 113              		.cfi_offset 14, -4
 114              	.LVL0:
 262:Src/system_stm32f0xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 263:Src/system_stm32f0xx.c **** 
 264:Src/system_stm32f0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 265:Src/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 115              		.loc 1 265 0
 116 0002 204B     		ldr	r3, .L12
 117 0004 5B68     		ldr	r3, [r3, #4]
 118 0006 0C22     		movs	r2, #12
 119 0008 1340     		ands	r3, r2
 120              	.LVL1:
 266:Src/system_stm32f0xx.c **** 
 267:Src/system_stm32f0xx.c ****   switch (tmp)
 121              		.loc 1 267 0
 122 000a 042B     		cmp	r3, #4
 123 000c 07D0     		beq	.L6
 124 000e 082B     		cmp	r3, #8
 125 0010 09D0     		beq	.L7
 126 0012 002B     		cmp	r3, #0
 127 0014 26D1     		bne	.L11
 268:Src/system_stm32f0xx.c ****   {
 269:Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 270:Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 128              		.loc 1 270 0
 129 0016 1C4A     		ldr	r2, .L12+4
 130 0018 1C4B     		ldr	r3, .L12+8
 131              	.LVL2:
 132 001a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 8


 271:Src/system_stm32f0xx.c ****       break;
 133              		.loc 1 271 0
 134 001c 25E0     		b	.L9
 135              	.LVL3:
 136              	.L6:
 272:Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 273:Src/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 137              		.loc 1 273 0
 138 001e 1A4A     		ldr	r2, .L12+4
 139 0020 1A4B     		ldr	r3, .L12+8
 140              	.LVL4:
 141 0022 1A60     		str	r2, [r3]
 274:Src/system_stm32f0xx.c ****       break;
 142              		.loc 1 274 0
 143 0024 21E0     		b	.L9
 144              	.LVL5:
 145              	.L7:
 275:Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 276:Src/system_stm32f0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 277:Src/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 146              		.loc 1 277 0
 147 0026 1748     		ldr	r0, .L12
 148 0028 4468     		ldr	r4, [r0, #4]
 149              	.LVL6:
 278:Src/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 150              		.loc 1 278 0
 151 002a 4268     		ldr	r2, [r0, #4]
 152 002c C023     		movs	r3, #192
 153              	.LVL7:
 154 002e 5B02     		lsls	r3, r3, #9
 155 0030 1A40     		ands	r2, r3
 156              	.LVL8:
 279:Src/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 157              		.loc 1 279 0
 158 0032 A40C     		lsrs	r4, r4, #18
 159              	.LVL9:
 160 0034 0F21     		movs	r1, #15
 161 0036 0C40     		ands	r4, r1
 162 0038 0234     		adds	r4, r4, #2
 163              	.LVL10:
 280:Src/system_stm32f0xx.c ****       predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 164              		.loc 1 280 0
 165 003a C36A     		ldr	r3, [r0, #44]
 166 003c 1940     		ands	r1, r3
 167 003e 0131     		adds	r1, r1, #1
 168              	.LVL11:
 281:Src/system_stm32f0xx.c **** 
 282:Src/system_stm32f0xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 169              		.loc 1 282 0
 170 0040 8023     		movs	r3, #128
 171 0042 5B02     		lsls	r3, r3, #9
 172 0044 9A42     		cmp	r2, r3
 173 0046 06D1     		bne	.L10
 283:Src/system_stm32f0xx.c ****       {
 284:Src/system_stm32f0xx.c ****         /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
 285:Src/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 174              		.loc 1 285 0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 9


 175 0048 0F48     		ldr	r0, .L12+4
 176 004a FFF7FEFF 		bl	__aeabi_uidiv
 177              	.LVL12:
 178 004e 4443     		muls	r4, r0
 179              	.LVL13:
 180 0050 0E4B     		ldr	r3, .L12+8
 181 0052 1C60     		str	r4, [r3]
 182 0054 09E0     		b	.L9
 183              	.LVL14:
 184              	.L10:
 286:Src/system_stm32f0xx.c ****       }
 287:Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) ||
 288:Src/system_stm32f0xx.c ****       else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 289:Src/system_stm32f0xx.c ****       {
 290:Src/system_stm32f0xx.c ****         /* HSI48 used as PLL clock source : SystemCoreClock = HSI48/PREDIV * PLLMUL */
 291:Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 292:Src/system_stm32f0xx.c ****       }
 293:Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F072xB || STM32F078xx || STM32F091xC || STM32F098xx */
 294:Src/system_stm32f0xx.c ****       else
 295:Src/system_stm32f0xx.c ****       {
 296:Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx)  || defined(STM32F070x6) \
 297:Src/system_stm32f0xx.c ****  || defined(STM32F078xx) || defined(STM32F071xB)  || defined(STM32F072xB) \
 298:Src/system_stm32f0xx.c ****  || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx)  || defined(STM32F030xC)
 299:Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/PREDIV * PLLMUL */
 300:Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 185              		.loc 1 300 0
 186 0056 0C48     		ldr	r0, .L12+4
 187 0058 FFF7FEFF 		bl	__aeabi_uidiv
 188              	.LVL15:
 189 005c 4443     		muls	r4, r0
 190              	.LVL16:
 191 005e 0B4B     		ldr	r3, .L12+8
 192 0060 1C60     		str	r4, [r3]
 193 0062 02E0     		b	.L9
 194              	.LVL17:
 195              	.L11:
 301:Src/system_stm32f0xx.c **** #else
 302:Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/2 * PLLMUL */
 303:Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 304:Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
 305:Src/system_stm32f0xx.c ****           STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
 306:Src/system_stm32f0xx.c ****           STM32F091xC || STM32F098xx || STM32F030xC */
 307:Src/system_stm32f0xx.c ****       }
 308:Src/system_stm32f0xx.c ****       break;
 309:Src/system_stm32f0xx.c ****     default: /* HSI used as system clock */
 310:Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 196              		.loc 1 310 0
 197 0064 084A     		ldr	r2, .L12+4
 198 0066 094B     		ldr	r3, .L12+8
 199              	.LVL18:
 200 0068 1A60     		str	r2, [r3]
 201              	.LVL19:
 202              	.L9:
 311:Src/system_stm32f0xx.c ****       break;
 312:Src/system_stm32f0xx.c ****   }
 313:Src/system_stm32f0xx.c ****   /* Compute HCLK clock frequency ----------------*/
 314:Src/system_stm32f0xx.c ****   /* Get HCLK prescaler */
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 10


 315:Src/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 203              		.loc 1 315 0
 204 006a 064B     		ldr	r3, .L12
 205 006c 5B68     		ldr	r3, [r3, #4]
 206 006e 1B09     		lsrs	r3, r3, #4
 207 0070 0F22     		movs	r2, #15
 208 0072 1340     		ands	r3, r2
 209 0074 064A     		ldr	r2, .L12+12
 210 0076 D35C     		ldrb	r3, [r2, r3]
 211              	.LVL20:
 316:Src/system_stm32f0xx.c ****   /* HCLK clock frequency */
 317:Src/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;
 212              		.loc 1 317 0
 213 0078 044A     		ldr	r2, .L12+8
 214 007a 1168     		ldr	r1, [r2]
 215 007c D940     		lsrs	r1, r1, r3
 216 007e 1160     		str	r1, [r2]
 318:Src/system_stm32f0xx.c **** }
 217              		.loc 1 318 0
 218              		@ sp needed
 219 0080 10BD     		pop	{r4, pc}
 220              	.L13:
 221 0082 C046     		.align	2
 222              	.L12:
 223 0084 00100240 		.word	1073876992
 224 0088 00127A00 		.word	8000000
 225 008c 00000000 		.word	.LANCHOR0
 226 0090 00000000 		.word	.LANCHOR1
 227              		.cfi_endproc
 228              	.LFE35:
 230              		.global	APBPrescTable
 231              		.global	AHBPrescTable
 232              		.global	SystemCoreClock
 233              		.section	.rodata.AHBPrescTable,"a",%progbits
 234              		.align	2
 235              		.set	.LANCHOR1,. + 0
 238              	AHBPrescTable:
 239 0000 00       		.byte	0
 240 0001 00       		.byte	0
 241 0002 00       		.byte	0
 242 0003 00       		.byte	0
 243 0004 00       		.byte	0
 244 0005 00       		.byte	0
 245 0006 00       		.byte	0
 246 0007 00       		.byte	0
 247 0008 01       		.byte	1
 248 0009 02       		.byte	2
 249 000a 03       		.byte	3
 250 000b 04       		.byte	4
 251 000c 06       		.byte	6
 252 000d 07       		.byte	7
 253 000e 08       		.byte	8
 254 000f 09       		.byte	9
 255              		.section	.rodata.APBPrescTable,"a",%progbits
 256              		.align	2
 259              	APBPrescTable:
 260 0000 00       		.byte	0
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 11


 261 0001 00       		.byte	0
 262 0002 00       		.byte	0
 263 0003 00       		.byte	0
 264 0004 01       		.byte	1
 265 0005 02       		.byte	2
 266 0006 03       		.byte	3
 267 0007 04       		.byte	4
 268              		.section	.data.SystemCoreClock,"aw",%progbits
 269              		.align	2
 270              		.set	.LANCHOR0,. + 0
 273              	SystemCoreClock:
 274 0000 00127A00 		.word	8000000
 275              		.text
 276              	.Letext0:
 277              		.file 2 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\machine\\_defaul
 278              		.file 3 "d:\\gcc-arm-none-eabi-5_4-2016q3-20160926-win32\\arm-none-eabi\\include\\sys\\_stdint.h"
 279              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f070x6.h"
ARM GAS  C:\Users\strag\AppData\Local\Temp\cc6JVto6.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f0xx.c
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:20     .text.SystemInit:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:25     .text.SystemInit:00000000 SystemInit
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:87     .text.SystemInit:00000050 $d
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:98     .text.SystemCoreClockUpdate:00000000 $t
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:103    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:223    .text.SystemCoreClockUpdate:00000084 $d
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:259    .rodata.APBPrescTable:00000000 APBPrescTable
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:238    .rodata.AHBPrescTable:00000000 AHBPrescTable
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:273    .data.SystemCoreClock:00000000 SystemCoreClock
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:234    .rodata.AHBPrescTable:00000000 $d
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:256    .rodata.APBPrescTable:00000000 $d
C:\Users\strag\AppData\Local\Temp\cc6JVto6.s:269    .data.SystemCoreClock:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
